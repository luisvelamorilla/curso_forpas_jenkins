pipeline {
    
    agent {
        label "cliente3"
    }
    
    options {
        timeout(time: 1, unit: 'HOURS')
    }
    
    stages {
        stage('Preparación') {
            options {
                timeout(time: 10, unit: 'MINUTES')
            }
            steps {
                script {
                    def ACTION = params.ACTION
                    def PROGRAMS = params.PROGRAMS
                    currentBuild.displayName = "${BUILD_ID} - ${JOB_NAME} - ${NODE_NAME}"


                }
            }
        }
        /*
        stage('Instalación') {
            steps {
                script {        
                    def PROGRAMS_ARRAY = PROGRAMS.split(' ')       
                    PROGRAMS.each { PROGRAM ->
                        def output = powershell(returnStdout: true, 
                            script: '''
                                choco ${ACTION} ${PROGRAM} -y 
                            ''')
                            echo output.trim()       
                    }                                   
                }
            }
        }
        
        stage('Verificación') {
            steps {
                script {                
                    def INSTALLED = powershell(
                        script: "choco list --localonly | Select-String -Pattern ${PROGRAM}",
                        returnStdout: true
                    ).trim()

                    echo "La accion a realizar es: ${ACTION}"
                    echo "Los programas son: ${PROGRAMS}"
                    
                    if (INSTALLED == null || INSTALLED.isEmpty()) {
                        echo "El programa ${PROGRAM} no se ha instalado correctamente."
                        // error "El programa ${PROGRAM} no se ha instalado correctamente."
                    } else {
                        echo "El programa ${PROGRAM} se ha instalado correctamente."
                    }
                }
            }
        }
         */
    }
}
