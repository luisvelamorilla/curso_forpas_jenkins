pipeline {
    
    agent {
        label "cliente3"
    }
    
    options {
        timeout(time: 1, unit: 'HOURS')
    }
    
    stages {
        stage('Preparaci贸n') {
            options {
                timeout(time: 1, unit: 'MINUTES')
            }
            steps {
                script {
                    def ACTION = params.ACTION
                    def PROGRAMS = params.PROGRAMS
                    def OPTIONS = params.OPTIONS                    
                    currentBuild.displayName = "${BUILD_ID} - ${JOB_NAME} - ${NODE_NAME}"

                    echo "ACTION: ${ACTION}" 
                    echo "PROGRAMS: ${PROGRAMS}" 
                    echo "OPTIONS: ${OPTIONS}"                     
                }
            }
        }

        stage('Instalaci贸n') {
            options {
                timeout(time: 10, unit: 'MINUTES')
            }            
            steps {
                script {        
                    def INSTALLING = powershell(
                        script: '''
                            $PROGRAMS = $ENV:PROGRAMS -Split ' '
                            choco $ENV:ACTION $PROGRAMS $ENV:OPTIONS -y --force
                        ''',
                        returnStdout: true
                    ).trim()
                    echo "Resultado: ${INSTALLING}"   
                }                               
            }
        }
  
        stage('Verificaci贸n instalaci贸n') {
            when {
                expression { ACTION == 'install' }
            }
            steps {
                script {        
                    def ITEMS = PROGRAMS.split(' ')
                    echo "Items: ${ITEMS}"

                    def CHECK = powershell(
                        script: '''
                        <#
                            $ITEMS = "$ENV:PROGRAMS" -split ' '
                            foreach ($ITEM in $ITEMS) {
                                choco list --localonly | Select-String -Pattern $ITEM
                                $result = choco list --localonly | Select-String -Pattern $ITEM
                                If($null -eq $result) {
                                    Write-Host -BackgroundColor Red "El programa $ITEM no se ha instalado"
                                    exit 1
                                }
                                Else {
                                    Write-Host "El programa $ITEM se ha instalado correctamente"
                                }
                            }
                        #>

                        ./Pipeline/exercise_1/check_choco_install.ps1 $ENV:PROGRAMS

                        ''',
                        returnStdout: true
                    ).trim()
                    echo "Resultado: ${CHECK}"   
                }
            }
        }

    }
}
